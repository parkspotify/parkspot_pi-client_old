# coding: utf-8

"""
    Swagger Parkspot2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: test@test.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ParkspotdataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_parkspotnode(self, x_api_key, parkspotdata, **kwargs):  # noqa: E501
        """Create a new parkspot node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_parkspotnode(x_api_key, parkspotdata, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: User's API-Key (required)
        :param NewParkspotData parkspotdata: Parkspot data to create a new database entry (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_parkspotnode_with_http_info(x_api_key, parkspotdata, **kwargs)  # noqa: E501
        else:
            (data) = self.create_parkspotnode_with_http_info(x_api_key, parkspotdata, **kwargs)  # noqa: E501
            return data

    def create_parkspotnode_with_http_info(self, x_api_key, parkspotdata, **kwargs):  # noqa: E501
        """Create a new parkspot node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_parkspotnode_with_http_info(x_api_key, parkspotdata, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: User's API-Key (required)
        :param NewParkspotData parkspotdata: Parkspot data to create a new database entry (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'parkspotdata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_parkspotnode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_parkspotnode`")  # noqa: E501
        # verify the required parameter 'parkspotdata' is set
        if ('parkspotdata' not in params or
                params['parkspotdata'] is None):
            raise ValueError("Missing the required parameter `parkspotdata` when calling `create_parkspotnode`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parkspotdata' in params:
            body_params = params['parkspotdata']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/parkspotnodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_parkspot_node(self, x_api_key, parkspot_id, **kwargs):  # noqa: E501
        """Delete a parkspot node  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_parkspot_node(x_api_key, parkspot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: User's API-Key (required)
        :param str parkspot_id: ID of the parkspot node to update (required)
        :return: ParkspotData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_parkspot_node_with_http_info(x_api_key, parkspot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_parkspot_node_with_http_info(x_api_key, parkspot_id, **kwargs)  # noqa: E501
            return data

    def delete_parkspot_node_with_http_info(self, x_api_key, parkspot_id, **kwargs):  # noqa: E501
        """Delete a parkspot node  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_parkspot_node_with_http_info(x_api_key, parkspot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: User's API-Key (required)
        :param str parkspot_id: ID of the parkspot node to update (required)
        :return: ParkspotData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'parkspot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_parkspot_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_parkspot_node`")  # noqa: E501
        # verify the required parameter 'parkspot_id' is set
        if ('parkspot_id' not in params or
                params['parkspot_id'] is None):
            raise ValueError("Missing the required parameter `parkspot_id` when calling `delete_parkspot_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parkspot_id' in params:
            path_params['parkspotID'] = params['parkspot_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/parkspotnodes/{parkspotID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ParkspotData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parkspot_node_by_id(self, x_api_key, parkspot_id, **kwargs):  # noqa: E501
        """Get an existing parkspot node by ID  # noqa: E501

        Returns a single parkspot node object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parkspot_node_by_id(x_api_key, parkspot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: User's API-Key (required)
        :param str parkspot_id: ID of the parkspot node to update (required)
        :return: ParkspotData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_parkspot_node_by_id_with_http_info(x_api_key, parkspot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_parkspot_node_by_id_with_http_info(x_api_key, parkspot_id, **kwargs)  # noqa: E501
            return data

    def get_parkspot_node_by_id_with_http_info(self, x_api_key, parkspot_id, **kwargs):  # noqa: E501
        """Get an existing parkspot node by ID  # noqa: E501

        Returns a single parkspot node object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parkspot_node_by_id_with_http_info(x_api_key, parkspot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: User's API-Key (required)
        :param str parkspot_id: ID of the parkspot node to update (required)
        :return: ParkspotData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'parkspot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parkspot_node_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_parkspot_node_by_id`")  # noqa: E501
        # verify the required parameter 'parkspot_id' is set
        if ('parkspot_id' not in params or
                params['parkspot_id'] is None):
            raise ValueError("Missing the required parameter `parkspot_id` when calling `get_parkspot_node_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parkspot_id' in params:
            path_params['parkspotID'] = params['parkspot_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/parkspotnodes/{parkspotID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ParkspotData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parkspotnodes(self, x_api_key, **kwargs):  # noqa: E501
        """Get the list of user's parkspot nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parkspotnodes(x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: User's API-Key (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_parkspotnodes_with_http_info(x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_parkspotnodes_with_http_info(x_api_key, **kwargs)  # noqa: E501
            return data

    def get_parkspotnodes_with_http_info(self, x_api_key, **kwargs):  # noqa: E501
        """Get the list of user's parkspot nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parkspotnodes_with_http_info(x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: User's API-Key (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parkspotnodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_parkspotnodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/parkspotnodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_parkspotnodes_status(self, x_api_key, parkspotdata, parkspot_id, **kwargs):  # noqa: E501
        """Update parkspot node's status to the cloud  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_parkspotnodes_status(x_api_key, parkspotdata, parkspot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: User's API-Key (required)
        :param UpdateParkspotStatus parkspotdata: Parkspot node's status data object (required)
        :param str parkspot_id: ID of the parkspot node to update (required)
        :return: JSONResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_parkspotnodes_status_with_http_info(x_api_key, parkspotdata, parkspot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_parkspotnodes_status_with_http_info(x_api_key, parkspotdata, parkspot_id, **kwargs)  # noqa: E501
            return data

    def update_parkspotnodes_status_with_http_info(self, x_api_key, parkspotdata, parkspot_id, **kwargs):  # noqa: E501
        """Update parkspot node's status to the cloud  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_parkspotnodes_status_with_http_info(x_api_key, parkspotdata, parkspot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: User's API-Key (required)
        :param UpdateParkspotStatus parkspotdata: Parkspot node's status data object (required)
        :param str parkspot_id: ID of the parkspot node to update (required)
        :return: JSONResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'parkspotdata', 'parkspot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_parkspotnodes_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_parkspotnodes_status`")  # noqa: E501
        # verify the required parameter 'parkspotdata' is set
        if ('parkspotdata' not in params or
                params['parkspotdata'] is None):
            raise ValueError("Missing the required parameter `parkspotdata` when calling `update_parkspotnodes_status`")  # noqa: E501
        # verify the required parameter 'parkspot_id' is set
        if ('parkspot_id' not in params or
                params['parkspot_id'] is None):
            raise ValueError("Missing the required parameter `parkspot_id` when calling `update_parkspotnodes_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parkspot_id' in params:
            path_params['parkspotID'] = params['parkspot_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-API-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parkspotdata' in params:
            body_params = params['parkspotdata']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/parkspotnodes/{parkspotID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JSONResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
